#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 153
#define YY_END_OF_BUFFER 154
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1028] =
    {   0,
        0,    0,  150,  150,    2,    2,  154,  152,    4,    4,
      152,  152,  142,  148,  142,  142,  145,  142,  142,  142,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  142,  150,  151,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  137,    0,    1,  145,
      144,  143,  139,  138,  136,  140,  147,  147,  147,  147,

      147,  147,  118,  147,  119,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  120,
      147,  147,  121,  122,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  123,  124,  125,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  126,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  141,  150,  149,    2,    2,    2,
        2,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  146,  143,
      106,  147,  107,  147,  147,  108,  147,  109,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  130,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  110,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  111,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  112,  147,  147,  113,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  114,  147,  147,
      115,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  116,  147,  147,  147,  147,  147,  147,
      147,  147,  117,  147,  147,  147,  147,  135,  147,  147,
      147,  147,  147,  147,  147,  147,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  147,  147,  147,  147,  147,  147,
       77,  147,   78,   79,  147,  147,   80,  147,  147,   81,

      147,  147,  147,  147,   82,  147,  147,  147,   83,   84,
      147,  147,  147,  147,  147,  147,  147,   85,  147,  147,
       86,   87,  147,  147,   88,  147,   89,  129,  147,  147,
      147,  147,  147,  147,   90,  147,   91,   92,   93,  147,
       95,  147,   96,  147,  147,  147,  147,   97,  147,  147,
      147,  147,  147,   98,  147,  147,  147,  147,  147,  147,
      147,  147,   99,  147,  147,  147,  147,  100,  101,  102,
      133,  147,  147,  147,  147,  147,  147,  147,  147,  103,
      147,  104,  147,  105,  132,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   57,   58,  147,   59,
      147,  147,  147,  147,  147,  147,   60,  147,  147,  147,

       61,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  134,   62,  147,  147,   63,  147,   94,  147,   64,
       65,  147,  147,  147,  147,   66,   67,   68,   69,  147,
      131,  147,  147,  147,   70,   71,  147,  147,  147,  147,
      147,   72,  147,  147,  147,  147,  147,   73,  147,  147,
      147,   74,  147,  147,  147,   75,  147,  147,  147,   76,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  147,   31,  147,  147,   32,  147,
       33,  147,  147,   34,  147,   35,  147,   36,   37,   38,
      147,   39,  147,  147,   41,   42,   43,   44,   45,  147,
      147,   46,  128,  147,  147,   47,  147,  147,  147,   48,
      147,   49,  127,   50,   51,  147,   52,  147,  147,  147,
       53,   54,   55,   56,  147,  147,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   15,   16,
       17,   18,   19,  147,   20,  147,  147,   21,   22,   40,
       23,  147,   24,  147,  147,   25,   26,  147,   27,   28,
      147,  147,  147,   29,   30,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  147,   10,   11,  147,   12,  147,   13,  147,

      147,   14,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  147,    7,  147,    8,    9,    2,    2,    2,
        2,    2,    5,    6,    2,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1035] =
    {   0,
        0,    0,  373,  368,   67,    0,  374, 4064,  133,  135,
      361,    0, 4064, 4064,  131,  345,  133,  132,  312,  300,
      129,  129,  137,  135,  145,  196,  171,  184,  188,  124,
      141,  183,  228,  230,  236,  235,    0,  250,  280,  323,
      257,  194,  231,  144,  243,    0,  281,    0,  259,  272,
      269,  273,    0,    0,  161,  259,  293,  292,  247,  224,
      381,  448,  502,  554,  602,  654,  301,  377,  702,  302,
      304,  379,  440,  754,  802,  449,  358,  453,  852,  904,
      490,  548,  461,  366,  164,  304, 4064,  221, 4064,  305,
      212,  209, 4064, 4064, 4064, 4064,    0,  147,  267,  296,

      317,  302,  322,  383,    0,  318,  338,  500,  391,  432,
      555,  445,  376,  386,  388,  428,  453,  555,  448,  459,
      484,  490,  496,  506,  504,  506,  543,  509,  503,    0,
      516,  550,  591,  556,  568,  556,  597,  602,  617,  591,
      598,  603,  599,  603,  612,  624,  623,    0,  629,  615,
      631,  656,  656,  654,  657,  659,  698,  655,  653,  676,
      676,  696,  680,  690,  695,  692,  710,  713,  720,  721,
      745,  719,  706,  730, 4064,    0, 4064,    0,  315,    0,
      212,    0,  353,  193,  190,    0,    0,    0,    0,  759,
      763,  767,  792,  817,  833,  856,  891,  773,  895,  851,

      939,  821,  905,  991,  943,  969,  993,  954,  980, 1004,
     1054, 1008, 1026, 1039, 1021, 1057, 1036, 1062, 1078, 1093,
     1091, 1103,  866, 1102, 1097, 1152, 1112, 1143, 1017, 1153,
     1156, 1186, 1185, 1187, 1201, 1177, 1215, 1220, 1243, 1244,
     1226, 1256, 1259, 1238, 1284, 1288, 1296, 1293, 1294, 1327,
     1318, 1326, 1348, 1336, 1359, 1330, 1362, 1376, 1364, 1381,
     1393, 1398, 1417, 1421, 1416, 1427, 1426,    0, 4064,  145,
        0,  757,    0,  768,  762,    0,  782,    0,  798,  814,
      850,  869,  848,  854,  870,  881,  914,  912,  940,    0,
      938,  953, 1260,  957,  961, 1008, 1090, 1117, 1131,    0,

     1145, 1142, 1177, 1227, 1243, 1359, 1390, 1432, 1437, 1427,
     1430, 1432, 1453, 1436, 1452, 1452, 1443, 1454, 1464, 1461,
     1472, 1475, 1476, 1478, 1464, 1472,    0, 1469, 1486, 1483,
     1490, 1494, 1489, 1490, 1477, 1480, 1480,    0, 1493, 1488,
     1490, 1506, 1509, 1514, 1503, 1510, 1516, 1529, 1511, 1526,
     1530, 1522, 1534,    0, 1517, 1523, 1525, 1534, 1531, 1528,
     1535, 1545,    0, 1546, 1537, 1540, 1558,    0, 1549, 1544,
     1565, 1546, 1551, 1566, 1575, 1567,    0,  140, 1583, 1584,
     1588, 1589, 1592, 1594, 1600, 1597, 1618, 1622, 1643, 1634,
     1633, 1648, 1651, 1652, 1662, 1674, 1656, 1684, 1700, 1696,

     1697, 1708, 1702, 1710, 1741, 1740, 1726, 1736, 1754, 1742,
     1766, 1770, 1772, 1782, 1780, 1776, 1808, 1810, 1812, 1826,
     1841, 1824, 1849, 1850, 1863, 1862, 1866, 1864, 1880, 1892,
     1894, 1898, 1904, 1906, 1903, 1917, 1916, 1934, 1929, 1952,
     1958, 1966, 1957, 1974, 1982, 1970, 2003, 2006, 2008, 1991,
     2007, 2024, 2032, 2045, 2040, 2043, 2042, 2058, 2073, 2076,
     2074, 2077, 2091, 2095, 2099, 2125, 2128, 2129, 2107, 2130,
     2131, 2153, 2174, 2182, 2168, 2140, 2170, 2183, 2198, 2204,
     2212, 2228, 2233, 2252, 1573, 1585, 1666, 1667, 1692, 1718,
        0, 1752,    0,    0, 1750, 1758,    0, 1800, 1802,    0,

     1851, 1879, 1925, 1973, 1975, 2083, 2102, 2174,    0,    0,
     2182, 2196, 2200, 2220, 2244, 2246, 2244,    0, 2231, 2251,
        0,    0, 2254, 2245,    0, 2248,    0,    0, 2258, 2248,
     2247, 2257, 2263, 2276,    0, 2274,    0,    0,    0, 2267,
        0, 2279,    0, 2287, 2276, 2291, 2282,    0, 2298, 2298,
     2287, 2288, 2294,    0, 2308, 2310, 2299, 2297, 2296, 2304,
     2306, 2321,    0, 2320, 2320, 2326, 2320,    0,    0, 2318,
        0, 2337, 2327, 2324, 2345, 2328, 2342, 2345, 2345,    0,
     2333,    0, 2350,    0,    0, 2360, 2361, 2358, 2364, 2366,
     2369, 2382, 2394, 2383, 2392, 2415, 2418, 2420, 2428, 2432,

     2424, 2449, 2437, 2466, 2472, 2474, 2490, 2478, 2500, 2477,
     2491, 2512, 2522, 2528, 2516, 2545, 2556, 2526, 2554, 2562,
     2570, 2564, 2567, 2599, 2585, 2580, 2615, 2586, 2598, 2610,
     2616, 2620, 2621, 2652, 2658, 2649, 2670, 2653, 2654, 2655,
     2688, 2664, 2686, 2689, 2694, 2712, 2722, 2718, 2723, 2746,
     2728, 2747, 2763, 2764, 2761, 2782, 2796, 2777, 2800, 2806,
     2814, 2830, 2817, 2798, 2831, 2832, 2835, 2860, 2854, 2856,
     2871, 2868, 2869, 2884, 2886, 2914, 2908, 2919, 2905, 2924,
     2922, 2940, 2938, 2943, 2953, 2957,    0,    0, 2374,    0,
     2398, 2399, 2428, 2424, 2424, 2436,    0, 2492, 2496, 2551,

        0, 2557, 2668, 2698, 2724, 2729, 2747, 2753, 2766, 2797,
     2840,    0,    0, 2831, 2865,    0, 2888,    0, 2894,    0,
        0, 2930, 2947, 2945, 2955,    0,    0,    0,    0, 2964,
        0, 2972, 2972, 2961,    0,    0, 2978, 2966, 2968, 2982,
     2984,    0, 2996, 2994, 2979, 2997, 3001, 2984, 2986, 2986,
     3011,    0, 3010, 3012, 3012,    0, 2999, 3018, 3020,    0,
     3022, 3027, 3030, 3032, 3033, 3035, 3045, 3061, 3036, 3048,
     3064, 3066, 3087, 3085, 3089, 3098, 3100, 3090, 3104, 3119,
     3123, 3133, 3135, 3152, 3161, 3144, 3157, 3158, 3167, 3169,
     3190, 3193, 3203, 3195, 3206, 3209, 3207, 3211, 3221, 3212,

     3243, 3244, 3246, 3247, 3249, 3261, 3262, 3260, 3277, 3278,
     3279, 3300, 3301, 3283, 3311, 3312, 3323, 3334, 3329, 3337,
     3355, 3352, 3367, 3368, 3369, 3377, 3385, 3391, 3386, 3400,
     3408, 3423, 3425, 3409, 3031,    0, 3092, 3141, 3281, 3311,
        0, 3337, 3359,    0, 3406,    0, 3428,    0,    0,    0,
     3431,    0, 3425, 3422,    0,    0,    0,    0,    0, 3426,
     3440,    0,    0, 3434, 3446,    0, 3429, 3451, 3434,    0,
     3459, 3445,    0,    0,    0, 3453,    0, 3466, 3467, 3450,
        0,    0,    0,    0, 3460, 3467, 3475, 3476, 3479, 3477,
     3491, 3507, 3493, 3510, 3516, 3519, 3528, 3529, 3544, 3533,

     3545, 3547, 3550, 3559, 3573, 3568, 3578, 3581, 3584, 3587,
     3596, 3599, 3602, 3613, 3617, 3635, 3636, 3618, 3651, 3621,
     3627, 3630, 3672, 3653, 3661, 3675, 3676, 3684, 3685, 3690,
     3720, 3706, 3687, 3709, 3715, 3724, 3725, 3739,    0,    0,
        0,    0,    0, 3486,    0, 3485, 3479,    0,    0,    0,
        0, 3564,    0, 3639, 3701,    0,    0, 3712,    0,    0,
     3717, 3733, 3749,    0,    0, 3750, 3755, 3758, 3760, 3761,
     3783, 3764, 3769, 3794, 3792, 3793, 3795, 3798, 3826, 3817,
     3834, 3823, 3828, 3829, 3852, 3838, 3857, 3869, 3860, 3863,
     3866, 3871, 3748,    0,    0, 3759,    0, 3787,    0, 3784,

     3821,    0, 3888, 3892, 3897, 3905, 3901, 3914, 3902, 3906,
     3931, 3923, 3835,    0, 3897,    0,    0, 3936, 3937, 3945,
     3940, 3946,    0,    0, 3955, 3968, 4064, 4033, 4038,  135,
     4043, 4048, 4053, 4058
    } ;

static const flex_int16_t yy_def[1035] =
    {   0,
     1027,    1, 1028, 1028, 1027,    5, 1027, 1027, 1027, 1027,
     1027, 1029, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1027, 1031, 1027, 1032, 1032, 1027,
     1032, 1033, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1034, 1034,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1032, 1027, 1027, 1029, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1030, 1030, 1030, 1030,

     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1027, 1031, 1027, 1032, 1032, 1032,
     1033, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62, 1032, 1027, 1027,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,

     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1032, 1032,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,

     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,

     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,

     1030, 1030,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1030, 1030, 1030, 1030, 1030,   62,   62,   62,
       62,   62, 1030, 1030,   62,   62,    0, 1027, 1027, 1027,
     1027, 1027, 1027, 1027
    } ;

static const flex_int16_t yy_nxt[4132] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   77,   84,   77,   48,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       77,   84,   77,   85,   86,   86,   86,   86,   89,   97,
       90,   92,   90,   93,   94,   98,  104,   99,  110,  378,
      106,  135,  111,  100,  270,  101,  112,  107,  136,  102,
      103,  174,  113,  271,  108,  114,  105,  109,  182,  115,
      183,  116,   98,  104,   99,  110,  117,  106,  135,  111,
      100,  118,  101,  112,  107,  136,  102,  103,  174,  113,
      271,  108,  114,  105,  109,  125,  115,  127,  116,  378,

      137,  126,  184,  117,  138,  128,  130,  170,  118,  119,
      139,  129,  131,  132,  133,  171,  377,  120,  270,  134,
      121,   91,  125,  122,  127,  269,  123,  137,  126,  124,
      268,  138,  128,  130,  170,  189,  119,  139,  129,  131,
      132,  133,  171,  143,  120,  140,  134,  121,  151,  141,
      122,  172,  173,  123,  147,  142,  124,  144,  188,  152,
      179,   86,  148,  145,  146,  153,  149,  154,  184,  150,
      143,  155,  140,   86,   86,  151,  141,  178,  172,  173,
      180,  147,  142,  167,  144,  168,  152,  177,  169,  148,
      145,  146,  153,  149,  154,  156,  150,  157,  155,  272,

      158,  185,  183,  186,  187,   86,   86,  159,  160,  175,
      167,   96,  168,   92,   90,  169,  179,   86,  190,  190,
      273,  229,  156,   95,  157,  218,  272,  158,  274,  228,
      275,  219,  277,  276,  159,  160,  161,  278,  190,  190,
      162,  190,  281,  163,  164,  190,  190,  273,  229,  282,
      165,  283,  218,  166,   91,  274,  228,  275,  219,  277,
      276,  185,  183,  161,  278,  190,  190,  162,  190,  281,
      163,  164,   87, 1027,   47,  190,  282,  165,  283,   47,
      166,  178,  178,  267,  178,  178,  178,  178,  178,  178,
      220,  178,  178,  178,  190,  190,  230,  191,  221,  192,

      231,  279,  190,  190,  222,  193,  232,  194,  287,  297,
      267,  195,  196,  298,  190,  280,  190,  220,  288,  299,
     1027,  190,  190,  230,  191,  221,  192,  231,  279, 1027,
      190,  222,  193,  232,  194,  287,  297, 1027,  195,  196,
      298,  190,  280,  190,  300,  288,  299,  178,  178,  178,
     1027,  178,  178,  178,  178,  178,  178,  233,  178,  178,
      178,  234,  244, 1027,  289,  197,  190,  235,  301,  290,
      247,  300,  307,  245,  248,  295,  296,  190,  190,  246,
     1027,  265,  266,  308,  233,  198,  190, 1027,  234,  244,
      190,  289,  197,  190,  235,  301,  290,  247,  190,  307,

      245,  248,  295,  296,  190,  190,  246,  190,  265,  266,
      308,  309,  198,  190,  178,  199,  260,  190,  261,  190,
      310,  262,  200,  311,  284,  190,  285,  190,  286,  201,
      312,  313,  202,  314,  190,  317,  318,  319,  309,  190,
     1027, 1027,  199,  260, 1027,  261,  190,  310,  262,  200,
      311,  284, 1027,  285,  190,  286,  201,  312,  313,  202,
      314,  263,  317,  318,  319,  190,  190,  203,  291,  264,
      302,  204,  303,  292,  315,  205,  304,  316,  320,  293,
     1027,  206,  325,  305,  207,  190,  294,  306,  263,  326,
     1027,  190,  190,  327,  203,  291,  264,  302,  204,  303,

      292,  315,  205,  304,  316,  320,  293,  321,  206,  325,
      305,  207,  190,  294,  306,  328,  326,  322,  190,  190,
      327,  334,  323,  324,  335,  329,  208,  330,  209,  336,
      331,  337,  332,  210,  321,  338,  339,  340,  211,  190,
     1027,  341,  328,  333,  322,  342,  190,  343,  334,  323,
      324,  335,  329,  208,  330,  209,  336,  331,  337,  332,
      210,  344,  338,  339,  340,  211,  190,  212,  341,  345,
      333,  190,  342,  346,  343,  213,  350,  347,  214,  351,
      348,  215,  355,  356,  216,  349, 1027,  217,  344,  357,
      358,  190, 1027, 1027,  212, 1027,  345,  361,  190, 1027,

      346, 1027,  213,  350,  347,  214,  351,  348,  215,  355,
      356,  216,  349,  352,  217,  362,  357,  358,  190,  190,
      223,  359,  353,  363,  361,  364,  224,  225,  226,  367,
      354,  365,  360,  227,  366, 1027,  374,  368,  375,  190,
      352,  369,  362,  376, 1027,  370,  190,  223,  359,  353,
      363,  371,  364,  224,  225,  226,  367,  354,  365,  360,
      227,  366,  372,  374,  368,  375,  190,  236,  369, 1027,
      376,  190,  370, 1027,  485,  373,  190, 1027,  371,  379,
      190,  237, 1027, 1027,  190,  486,  487,  238,  239,  372,
      190,  190, 1027, 1027,  236,  488,  190, 1027,  190,  380,

      190,  485,  373,  190,  190, 1027,  379,  190,  237,  190,
      190,  190,  486,  487,  238,  239,  381,  190,  190,  190,
      240, 1027,  488,  190,  382,  489,  380,  190,  241,  190,
      383,  190,  242,  384,  190,  243,  190,  190,  395,  190,
     1027, 1027, 1027,  381, 1027, 1027,  190,  240,  396,  490,
      190,  382,  489, 1027,  190,  241,  190,  383,  190,  242,
      384,  190,  243,  385,  391,  395,  190,  249,  190,  250,
      190,  386,  251,  190,  491,  396,  490,  190,  494,  252,
      253,  190, 1027,  190,  492,  190,  493,  495,  190,  190,
      385,  391, 1027,  190,  249,  190,  250,  190,  386,  251,

      190,  491,  496,  190, 1027,  494,  252,  253,  190,  387,
      190,  492,  190,  493,  495,  190,  190,  254,  497,  389,
      190,  255,  190,  388,  256,  257,  390,  498,  190,  496,
      190,  258,  190, 1027,  259,  190,  387,  397, 1027,  190,
     1027,  190,  398,  499,  254,  497,  389, 1027,  255,  190,
      388,  256,  257,  390,  498,  190,  190,  500,  258,  190,
      190,  259,  501,  392,  397,  393,  502,  394,  190,  398,
      499,  190,  505,  403,  404, 1027,  190, 1027,  506, 1027,
      190, 1027, 1027,  190,  500,  407,  190,  190, 1027,  501,
      392,  190,  393,  502,  394, 1027,  408,  190,  190,  505,

      403,  404,  405,  190,  399,  506,  190,  190,  190,  400,
      190, 1027,  407,  190, 1027,  401, 1027,  190,  190,  409,
      406,  190,  402,  408,  190,  190, 1027, 1027,  190,  405,
      190,  399,  415,  190,  190,  190,  400,  190,  190, 1027,
      507,  190,  401,  190,  190,  190,  409,  406,  190,  402,
      416,  418,  190,  190,  435,  190,  190,  190,  190,  415,
      420,  190, 1027,  190, 1027,  190,  417,  507,  190,  410,
      190,  411,  190,  190,  190,  412,  190,  416,  418,  190,
      190,  435,  413,  190,  419,  190,  414,  420, 1027,  421,
      190,  190, 1027,  417,  190,  190,  410, 1027,  411,  190,

      190,  190,  412,  190,  508,  422,  190, 1027,  190,  413,
      190,  419, 1027,  414,  190,  190,  421,  425,  190,  190,
      190,  190,  190,  427,  423,  428,  190,  424,  190,  190,
      190,  508,  422, 1027,  190,  190,  426,  190,  433,  190,
      190,  190,  190, 1027,  425,  509,  190,  190,  510,  190,
      427,  423,  428, 1027,  424,  190,  190,  190,  511,  512,
      190,  190, 1027,  426,  434,  433,  190,  190,  429,  190,
      190,  436,  509,  190, 1027,  510,  190, 1027,  430,  437,
      190,  438, 1027,  431,  432,  511,  512,  190, 1027,  190,
      190,  434,  513,  190,  190,  429,  190,  190,  436,  439,

      190,  440,  190,  190,  190,  430,  437,  190,  438,  445,
      431,  432,  441,  443,  190,  442,  190,  190,  190,  513,
      190,  190,  190,  190,  190, 1027,  439,  444,  440,  190,
      190,  190,  190, 1027, 1027, 1027,  445,  190,  190,  441,
      443,  190,  442,  190,  447,  190, 1027,  446, 1027,  190,
      190,  190,  190, 1027,  444,  190,  448,  190,  514,  190,
      190,  190,  449,  190,  190,  190, 1027,  515,  452, 1027,
      190,  447,  450,  190,  446,  190,  190,  503, 1027,  190,
      190,  190,  190,  448,  190,  514, 1027,  190,  190,  449,
      190,  451,  504,  190,  515,  452,  190,  453, 1027,  450,

      190,  190,  190,  190,  503,  454, 1027,  190,  190,  455,
      190,  190,  458,  190,  459, 1027, 1027, 1027,  451,  504,
      190,  190,  456,  190,  453,  190, 1027,  457,  190, 1027,
      190,  190,  454,  190, 1027,  190,  455,  190,  190,  458,
      190,  459,  460,  190,  190,  463, 1027,  469,  190,  456,
      466,  461,  190,  190,  457,  190,  464,  190,  190,  462,
      190,  465,  190,  190,  190,  190, 1027,  190, 1027,  460,
      190,  190,  463,  190,  469, 1027,  190,  466,  461,  190,
      190,  190,  190,  464,  467,  190,  462,  470,  465,  516,
      190,  190,  190,  190,  190,  468,  190,  472,  190,  190,

      190,  190,  473,  190,  471,  474,  190, 1027,  190,  475,
      190,  467,  190,  190,  470,  476,  516, 1027,  190,  477,
      190,  517,  468,  190,  472,  190,  190, 1027,  190,  473,
      190,  471,  474,  482,  190,  190,  475,  190,  480,  484,
      190,  478,  476,  190,  190,  190,  477,  479,  517,  518,
      519,  481,  520,  190,  190,  521,  522,  190,  190,  483,
      482,  190,  190,  190,  190,  480,  484,  523,  478,  524,
      190,  190,  525,  526,  479,  527,  518,  519,  481,  520,
      190,  190,  521,  522,  528,  190,  483,  529,  530,  531,
      190,  190,  532,  533,  523,  534,  524,  536,  537,  525,

      526,  538,  527,  539,  540,  535,  541,  542,  543,  544,
      545,  528,  546,  547,  529,  530,  531,  548,  549,  532,
      533,  550,  534,  551,  536,  537,  552,  553,  538,  554,
      539,  540,  535,  541,  542,  543,  544,  545,  555,  546,
      547,  556,  557,  558,  548,  549,  559,  560,  550,  561,
      551,  562,  563,  552,  553,  564,  554,  565,  566,  567,
      568,  569,  570,  571,  573,  555,  574,  575,  556,  557,
      558,  576,  572,  559,  560,  577,  561,  578,  562,  563,
      579,  580,  564,  581,  565,  566,  567,  568,  569,  570,
      571,  573,  582,  574,  575,  584,  583,  585,  576,  572,

      190,  586,  577,  687,  578,  190,  587,  579,  580,  190,
      581,  190, 1027,  589,  190,  688,  588,  190, 1027,  582,
      190,  190,  584,  583,  585,  190,  190,  190,  586,  190,
      687,  190,  190,  587,  190,  190,  190,  190,  190,  190,
      589,  190,  688,  588,  190,  590, 1027,  190,  190,  593,
      190,  594,  190,  190, 1027,  190,  190,  591,  190,  190,
      190,  190,  190,  595,  190,  190,  190,  592,  190,  190,
      190,  190,  590,  601, 1027,  599,  593,  190,  594,  190,
      190,  596,  190,  597,  591,  190,  190,  190,  190,  598,
      595,  190,  190,  190,  592,  190,  190,  190,  190,  190,

      601,  190,  599,  689,  690,  600,  190,  190,  596,  603,
      597,  190,  190,  190,  604,  190,  598,  190,  190,  607,
      190,  190,  691,  606,  602,  190,  190,  190,  190,  605,
      689,  690,  600,  190,  190,  692,  603,  190,  190,  190,
      190,  604,  608,  611,  190,  190,  607,  190,  190,  691,
      606,  602,  190,  190,  190,  609,  605,  190,  190,  613,
      190,  190,  692,  190,  190,  693,  190,  612,  610,  608,
      611,  190,  190,  190,  190,  694, 1027,  190,  190,  190,
      190,  614,  609,  190,  190,  190,  613,  190,  695,  190,
      190,  190,  693,  619,  612,  610,  616,  190,  190,  190,

      190,  615,  694,  190,  190,  190,  190,  190,  614,  190,
      190,  618,  617,  190,  190,  695,  190,  190,  190,  190,
      619,  620, 1027,  616,  190,  190,  190,  190,  615,  190,
      190, 1027,  696,  697,  190,  621,  190,  622,  618,  617,
      190,  190, 1027,  190,  190,  190,  190,  190,  620,  190,
      623, 1027,  190, 1027,  190,  624,  190,  625,  190,  696,
      697,  190,  621,  190,  622, 1027,  190,  190,  190,  626,
      190,  627,  190, 1027,  190,  698,  190,  623,  190,  190,
      190,  190,  624,  190,  625,  190,  190,  190,  190,  630,
      190,  631,  629,  190,  190,  628,  626,  632,  627,  190,

      190,  190,  698,  190, 1027,  190,  190,  190,  190,  633,
      190,  634,  699,  190,  190,  635,  630,  190,  631,  629,
      190,  190,  628,  190,  632,  636,  190,  190,  190,  190,
      190,  190,  638,  640,  190,  190,  633,  637,  634,  699,
      190,  190,  635,  190,  190,  642,  190,  190,  190,  639,
      190,  190,  636,  190,  190,  641,  190,  700,  190,  638,
      640,  190,  190, 1027,  637,  643,  190,  190,  190,  190,
      190,  190,  642,  190,  190,  190,  639,  644,  190, 1027,
      190,  190,  641,  190,  700,  645,  701,  190, 1027,  190,
      646,  190,  643,  190,  190,  190,  190, 1027,  190,  190,

     1027,  190,  190,  190,  644,  702,  647,  190,  652, 1027,
      190,  190,  645,  701,  190,  648,  190,  646,  190,  190,
      190,  190,  190,  190,  653,  190,  190,  649,  190, 1027,
      190, 1027,  702,  647,  190,  652,  650,  654,  190,  651,
      190,  190,  648,  190,  190,  190,  190,  190, 1027,  190,
      190,  653,  190, 1027,  649,  190,  658,  190,  655,  190,
      190,  190,  190,  650,  654,  657,  651,  190,  190,  190,
      190,  190,  190,  656,  659,  190,  190,  190,  660,  190,
      190, 1027,  190,  658,  190,  655,  190,  190,  190,  190,
      661,  663,  657,  190,  190,  190,  190, 1027,  703, 1027,

      656,  659,  190,  662,  190,  660,  190,  190,  190,  190,
      190,  190,  190,  190,  190, 1027,  190,  661,  663, 1027,
      190,  190,  190,  704,  190,  703,  664,  665,  190, 1027,
      662,  666,  190,  670, 1027,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  671,  190,  667,
      704,  190, 1027,  664,  665,  190,  668,  190,  666,  190,
      670,  669,  190,  190, 1027,  190,  190,  190,  190,  190,
      672,  190,  190,  190,  671,  190,  667,  190, 1027,  673,
     1027,  677, 1027,  668,  190,  190, 1027,  190,  669,  190,
      190,  190,  190,  190,  190,  190,  678,  672,  705,  190,

      190,  674, 1027,  675,  190,  190,  673,  190,  677,  676,
      706,  190,  190,  680,  190,  190,  679,  190,  190,  190,
      190,  190, 1027,  678,  707,  705,  190,  190,  674,  190,
      675, 1027,  190,  708,  190,  190,  676,  706,  190,  681,
      680,  190,  190,  679,  682,  190,  190,  190,  190,  190,
      190,  707,  709,  685,  683, 1027,  190,  710,  684,  711,
      708,  712,  190,  713,  714,  190,  681,  715,  190,  190,
      190,  682,  190,  716,  717,  718,  190,  190,  719,  709,
      685,  683,  686,  720,  710,  684,  711,  721,  712,  190,
      713,  714,  190,  722,  715,  723,  190,  190,  725,  726,

      716,  717,  718,  727,  728,  719,  724,  729,  730,  686,
      720,  731,  732,  733,  721,  734,  190,  735,  736,  737,
      722,  738,  723,  739,  740,  725,  726,  741,  742,  743,
      727,  728,  744,  724,  729,  730,  745,  746,  731,  732,
      733,  747,  734,  748,  735,  736,  737,  749,  738,  750,
      739,  740,  751,  752,  741,  742,  743,  753,  754,  744,
      755,  756,  757,  745,  746,  758,  759,  760,  747, 1027,
      748, 1027, 1027, 1027,  749,  190,  750,  190,  190,  751,
      752,  190, 1027,  190,  753,  754,  766,  755,  756,  757,
      761,  762,  758,  759,  760,  763,  765,  190,  190,  190,

      190,  764,  190,  190,  190,  190,  190,  767,  190,  190,
      190,  190,  835,  766, 1027,  836,  837,  761,  762,  190,
      190, 1027,  763,  765,  190,  190,  190,  190,  764,  190,
      190,  190,  190,  190,  767,  190,  190,  190,  190,  835,
      768,  190,  836,  837,  838,  190,  190,  190,  769,  190,
      839,  840,  190,  841,  190,  190,  190,  190,  190,  190,
      770,  190,  190,  771,  190,  190,  190,  768,  190,  190,
      773,  838,  190,  772,  190,  769,  190,  839,  840,  190,
      841,  190,  190,  190,  190,  775,  190,  770,  190,  190,
      771,  190,  190,  190,  190,  190,  190,  773,  774,  778,

      772,  190, 1027,  190,  776,  777, 1027,  190,  190,  190,
      190,  190,  775,  190,  190,  190,  190,  190,  190,  842,
      843,  190,  190, 1027,  779,  774,  778,  190,  190,  190,
      190,  776,  777,  190,  190,  190,  190,  190,  190,  190,
      780,  190,  190,  786,  190,  190,  842,  843,  783,  190,
      781,  779, 1027,  190,  190,  190,  190, 1027,  784,  190,
      190,  782,  190,  190,  190,  190,  190,  780,  844,  785,
      786,  190,  190,  190, 1027,  783,  190,  781,  845,  190,
      190,  190,  190,  788,  190,  784,  190,  190,  782,  190,
      190,  190,  190,  190,  787,  844,  785,  190,  190,  190,

      190,  190,  190,  190,  190,  845,  190,  190,  190,  190,
      788,  190,  789,  790,  190,  190,  190,  190,  190, 1027,
      190,  787,  190,  190,  190, 1027,  190,  792,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  789,
      790,  791,  190,  190,  190, 1027,  793,  190, 1027,  190,
      190,  795,  190,  190,  792, 1027,  794,  190,  190,  190,
      190, 1027,  190,  190,  190,  190,  190, 1027,  791,  190,
      190,  190,  190,  793,  190,  190, 1027,  797,  795,  190,
      190,  190,  796,  794,  190,  190,  190,  190,  798,  190,
      190,  190,  190,  190,  799,  190,  190,  190,  190,  190,

      846,  190,  190,  190,  797,  190,  190,  190,  190,  796,
      801,  802, 1027,  190,  190,  798,  190,  190,  190,  190,
      800,  799,  190,  190,  847,  190,  190,  846,  190,  190,
      190,  190,  190,  190,  190,  190, 1027,  801,  802,  190,
      190,  848,  805,  803,  804,  808,  849,  800,  806,  190,
      190,  847,  190,  190, 1027,  190,  190, 1027,  190,  190,
      190,  807,  190,  190,  190,  190,  190,  190,  848,  805,
      803,  804,  808,  849, 1027,  806,  190,  809,  190,  850,
      190,  190,  190,  190,  190,  851,  190,  190,  807,  811,
      190,  190,  190,  810,  190,  812, 1027,  852,  190,  190,

      190,  190,  814, 1027,  809,  190,  850,  190,  190,  813,
      190,  190,  851,  190,  190,  190,  811,  190,  853,  190,
      810,  190,  812,  190,  852,  190,  190,  190,  190,  814,
      815,  190,  819,  190,  190,  190,  813,  190,  816,  817,
      190,  190,  190,  190,  190,  853,  190,  190,  820,  190,
      190,  190,  822,  821,  190,  854,  818,  815,  190,  819,
      190,  190,  190,  855,  190,  816,  817,  190,  190,  190,
      190,  190,  190,  190,  190,  820,  190,  190,  190,  822,
      821,  190,  854,  818,  825,  190,  190,  823,  190,  856,
      855,  190, 1027,  190,  190,  190,  190,  190,  190,  190,

      190,  190,  824,  190,  190,  190,  190,  857,  190, 1027,
      826,  825,  190,  190,  823,  190,  856, 1027,  190,  827,
      190,  190,  831,  190,  190,  190,  858,  828,  190,  824,
      190,  190,  190,  190,  857,  190,  190,  826,  830,  190,
      829,  190,  190, 1027,  832,  190,  827, 1027,  190,  831,
      190,  190,  190,  858,  828,  190,  190,  190,  190,  190,
      834,  190,  859,  190,  860,  830,  190,  829,  190,  190,
      190,  832,  190,  833,  190,  190,  861,  190,  190,  862,
      190,  863,  190,  190,  190,  864,  190,  834,  190,  859,
      190,  860,  865,  866,  190,  867,  868,  190,  869,  870,

      833,  190,  190,  861,  190,  871,  862,  190,  863,  872,
      873,  874,  864,  875,  876,  877,  878,  190,  879,  865,
      866,  190,  867,  868,  880,  869,  870,  881,  882,  883,
      884,  885,  871,  886, 1027, 1027,  872,  873,  874,  190,
      875,  876,  877,  878,  190,  879, 1027,  190,  939,  190,
      888,  880,  889,  190,  881,  882,  883,  884,  885,  190,
      886,  890,  190,  892,  190,  893,  190,  190,  887,  190,
      190,  190,  190,  190,  190,  939,  190,  888,  190,  889,
      190,  190,  190,  190, 1027,  190,  190,  891,  890,  190,
      892,  190,  893,  894,  190,  887,  190,  190,  190,  190,

      190,  190,  896,  190,  190,  190,  190,  190,  190,  190,
      190,  895,  190, 1027,  891,  190,  899,  190,  940,  897,
      894,  900,  190, 1027,  190,  190,  190,  190,  190,  896,
      190,  190,  898,  190,  190,  190,  901,  190,  895, 1027,
      190,  190,  190,  899,  190,  940,  897, 1027,  900,  190,
      190,  190,  190,  190,  190,  902,  190, 1027,  941,  898,
      190,  190,  190,  901,  190,  903,  904,  190,  190,  190,
      190, 1027,  190,  905,  190,  190,  906,  190,  190,  190,
     1027,  190,  902,  190,  190,  941,  190,  190,  190,  190,
      907,  908,  903,  904,  190,  190,  190,  190,  190,  190,

      905,  190,  190,  906,  190,  190,  190,  190,  190,  909,
      190,  190,  190,  190, 1027, 1027,  190,  907,  908, 1027,
      190,  190,  190,  190,  912,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  910,  909,  190,  190,  190,
      190,  911,  913,  190,  190,  914,  190,  190,  190,  190,
      190,  912, 1027,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  910,  190,  915,  190,  190,  190,  911,  913,
      190,  190,  914,  190,  916,  190,  190,  190,  190,  190,
      190,  190,  917,  190,  190,  190,  190,  190,  190, 1027,
      190,  915,  918,  190,  190,  190,  919,  190,  190,  190,

      922,  916, 1027, 1027,  190,  190,  190,  190,  190,  917,
      190,  190,  942,  190,  190,  190,  190,  190,  190,  918,
      190,  190,  190,  919,  190,  190,  190,  922,  190,  190,
      920,  921,  923, 1027, 1027,  943,  924,  190,  190,  942,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      925,  190,  944,  927,  190,  190,  190,  920,  921,  923,
      190,  926,  943,  924,  190,  190,  190,  190,  928,  190,
     1027,  190,  190,  190,  190,  190,  190,  925,  190,  944,
      927,  190,  932,  929,  190,  190,  190,  190,  926,  190,
     1027,  945,  190,  190,  190,  928,  190,  930,  190,  190,

      931,  190,  933,  935,  190,  190,  190,  934,  190,  932,
      929,  190,  190,  190,  190, 1027,  190,  190,  945,  190,
      946,  190,  190,  190,  930,  190,  190,  931,  190,  933,
      935,  190,  190,  190,  934,  190,  937,  190,  938,  936,
      190,  190,  190,  947,  190,  190,  190,  946,  948,  190,
      190,  949,  190,  190,  950,  190,  951,  952,  953,  954,
      190,  955,  190,  937,  190,  938,  936,  190,  956,  190,
      947,  957,  190,  190,  958,  948,  959,  960,  949,  961,
      962,  950,  963,  951,  952,  953,  954,  190,  955,  190,
      964,  965,  966,  190,  968,  956,  190, 1027,  957,  993,

     1027,  958,  994,  959,  960,  967,  961,  962,  190,  963,
      190,  995,  190,  190,  190, 1027,  190,  964,  965,  966,
      190,  968,  969,  190,  190,  971,  993,  190,  190,  994,
      190,  970,  967,  190, 1027,  190,  190,  190,  995,  190,
      190,  190,  973,  190,  190,  190,  190,  190,  972,  969,
      190,  190,  971,  190,  190,  190,  190,  190,  970,  974,
      190,  190,  190,  190,  190,  190,  190,  975, 1027,  973,
      190,  190,  190,  190,  190,  972,  190,  190, 1027,  996,
      190,  190,  190,  190,  190,  190,  974,  190,  190,  190,
      190,  190,  190,  190,  975,  190,  190,  190,  190,  976,

      977,  190, 1027,  190,  190,  190,  996, 1027,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  979,
     1027,  190,  190,  190,  190,  190,  976,  977,  190,  978,
      190,  190,  190,  190,  190,  190,  190,  190,  983,  190,
      190, 1027,  190,  190,  190,  190,  979,  190,  190,  981,
      190,  190,  190,  190,  190,  190,  978,  190,  190,  980,
      190,  190,  190,  190,  984,  983,  190,  190,  190,  997,
      190,  190,  190,  190,  190, 1027,  981,  190,  190,  190,
      190,  190,  190,  982,  986,  190,  980,  985,  190,  190,
      190,  984,  190,  190,  190,  190,  997,  190,  190,  190,

      190,  190,  190,  988,  190,  190, 1027,  190,  987,  190,
      982,  986,  190,  190,  985,  190,  190,  190,  998,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      988,  190,  190,  989,  190,  987,  190,  190,  990,  190,
      190,  190,  190,  190,  999,  998,  190, 1000,  190,  190,
      190,  190,  190,  190,  190,  991,  190,  190, 1001,  190,
      989,  190,  190,  992,  190,  990, 1002,  190,  190,  190,
      190,  999,  190,  190, 1000,  190,  190,  190,  190,  190,
     1013,  190,  991,  190,  190, 1001, 1004,  190,  190,  190,
      992, 1014,  190, 1002,  190,  190, 1003,  190,  190,  190,

      190,  190,  190,  190,  190,  190,  190, 1013,  190,  190,
      190,  190,  190, 1004,  190,  190, 1027, 1015, 1014,  190,
      190, 1016,  190, 1003,  190,  190, 1005,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
     1008, 1006,  190,  190, 1015,  190,  190,  190, 1016, 1017,
     1027,  190, 1023, 1005,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190, 1007,  190,  190, 1008, 1006,  190,
      190,  190,  190,  190,  190,  190, 1017,  190,  190, 1023,
     1012,  190,  190,  190, 1009, 1011,  190,  190,  190,  190,
      190, 1007,  190,  190,  190, 1027,  190,  190,  190, 1010,

      190,  190,  190,  190,  190,  190,  190, 1012,  190,  190,
      190, 1009, 1011,  190,  190,  190,  190, 1027,  190,  190,
     1018,  190,  190,  190,  190,  190, 1010,  190, 1024,  190,
      190,  190,  190,  190,  190,  190,  190, 1019,  190,  190,
      190,  190,  190, 1021, 1020,  190,  190, 1018,  190,  190,
      190,  190,  190, 1025,  190, 1024,  190,  190,  190, 1022,
      190,  190,  190,  190, 1019,  190,  190,  190,  190,  190,
     1021, 1020,  190,  190,  190,  190, 1026,  190,  190, 1027,
     1025,  190,  190,  190,  190,  190, 1022,  190, 1027,  190,
      190, 1027,  190, 1027, 1027,  190, 1027, 1027, 1027,  190,

      190,  190, 1027, 1026,  190,  190, 1027, 1027, 1027,  190,
      190, 1027,  190, 1027, 1027, 1027, 1027, 1027, 1027,  190,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027,  190,   46,   46,   46,   46,   46,   88, 1027,
     1027,   88,   88,  176,  176,  176, 1027,  176,  178, 1027,
      178,  178,  178,  181, 1027,  181,  181,  181,  190, 1027,
      190,  190,  190,    7, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,

     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027
    } ;

static const flex_int16_t yy_chk[4132] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1030,
       15,   17,   17,   18,   18,   21,   22,   21,   24,  378,
       23,   30,   24,   21,  270,   21,   24,   23,   31,   21,
       21,   44,   24,   98,   23,   24,   22,   23,   55,   25,
       55,   25,   21,   22,   21,   24,   25,   23,   30,   24,
       21,   25,   21,   24,   23,   31,   21,   21,   44,   24,
       98,   23,   24,   22,   23,   27,   25,   28,   25,  185,

       32,   27,  184,   25,   32,   28,   29,   42,   25,   26,
       32,   28,   29,   29,   29,   42,  181,   26,   92,   29,
       26,   91,   27,   26,   28,   88,   26,   32,   27,   26,
       85,   32,   28,   29,   42,   60,   26,   32,   28,   29,
       29,   29,   42,   34,   26,   33,   29,   26,   36,   33,
       26,   43,   43,   26,   35,   33,   26,   34,   59,   36,
       49,   49,   35,   34,   34,   36,   35,   38,   56,   35,
       34,   38,   33,   50,   50,   36,   33,   52,   43,   43,
       51,   35,   33,   41,   34,   41,   36,   47,   41,   35,
       34,   34,   36,   35,   38,   39,   35,   39,   38,   99,

       39,   57,   57,   58,   58,   86,   86,   39,   39,   45,
       41,   20,   41,   90,   90,   41,  179,  179,   67,   70,
      100,   71,   39,   19,   39,   67,   99,   39,  100,   70,
      101,   67,  102,  101,   39,   39,   40,  103,   67,   70,
       40,   71,  106,   40,   40,   67,   70,  100,   71,  106,
       40,  107,   67,   40,   16,  100,   70,  101,   67,  102,
      101,  183,  183,   40,  103,   67,   70,   40,   71,  106,
       40,   40,   11,    7,    4,   77,  106,   40,  107,    3,
       40,   61,   61,   84,   61,   61,   61,   61,   61,   61,
       68,   61,   61,   61,   68,   77,   72,   61,   68,   61,

       72,  104,   77,   84,   68,   61,   72,   61,  109,  113,
       84,   61,   61,  114,   68,  104,   72,   68,  109,  115,
        0,   68,   77,   72,   61,   68,   61,   72,  104,    0,
       84,   68,   61,   72,   61,  109,  113,    0,   61,   61,
      114,   68,  104,   72,  116,  109,  115,   61,   62,   62,
        0,   62,   62,   62,   62,   62,   62,   73,   62,   62,
       62,   73,   76,    0,  110,   62,   76,   73,  117,  110,
       78,  116,  119,   76,   78,  112,  112,   73,   83,   76,
        0,   83,   83,  120,   73,   62,   76,    0,   73,   76,
       78,  110,   62,   76,   73,  117,  110,   78,   83,  119,

       76,   78,  112,  112,   73,   83,   76,   81,   83,   83,
      120,  121,   62,   76,   62,   63,   81,   78,   81,   63,
      122,   81,   63,  123,  108,   83,  108,   81,  108,   63,
      124,  125,   63,  126,   81,  128,  129,  131,  121,   63,
        0,    0,   63,   81,    0,   81,   63,  122,   81,   63,
      123,  108,    0,  108,   81,  108,   63,  124,  125,   63,
      126,   82,  128,  129,  131,   82,   63,   64,  111,   82,
      118,   64,  118,  111,  127,   64,  118,  127,  132,  111,
        0,   64,  134,  118,   64,   82,  111,  118,   82,  135,
        0,   64,   82,  136,   64,  111,   82,  118,   64,  118,

      111,  127,   64,  118,  127,  132,  111,  133,   64,  134,
      118,   64,   82,  111,  118,  137,  135,  133,   64,   65,
      136,  140,  133,  133,  141,  138,   65,  138,   65,  142,
      139,  143,  139,   65,  133,  144,  145,  146,   65,   65,
        0,  147,  137,  139,  133,  149,   65,  150,  140,  133,
      133,  141,  138,   65,  138,   65,  142,  139,  143,  139,
       65,  151,  144,  145,  146,   65,   65,   66,  147,  152,
      139,   66,  149,  153,  150,   66,  155,  153,   66,  156,
      154,   66,  158,  159,   66,  154,    0,   66,  151,  160,
      161,   66,    0,    0,   66,    0,  152,  163,   66,    0,

      153,    0,   66,  155,  153,   66,  156,  154,   66,  158,
      159,   66,  154,  157,   66,  164,  160,  161,   66,   69,
       69,  162,  157,  165,  163,  166,   69,   69,   69,  168,
      157,  167,  162,   69,  167,    0,  172,  169,  173,   69,
      157,  169,  164,  174,    0,  170,   69,   69,  162,  157,
      165,  170,  166,   69,   69,   69,  168,  157,  167,  162,
       69,  167,  171,  172,  169,  173,   69,   74,  169,    0,
      174,   74,  170,    0,  272,  171,  190,    0,  170,  191,
      191,   74,    0,    0,  192,  274,  275,   74,   74,  171,
      198,   74,    0,    0,   74,  277,  190,    0,   74,  192,

      191,  272,  171,  190,  192,    0,  191,  191,   74,  193,
      198,  192,  274,  275,   74,   74,  193,  198,   74,   75,
       75,    0,  277,  190,  193,  279,  192,  191,   75,  193,
      194,  192,   75,  194,  194,   75,  193,  198,  202,   75,
        0,    0,    0,  193,    0,    0,   75,   75,  202,  280,
      195,  193,  279,    0,  194,   75,  193,  194,  202,   75,
      194,  194,   75,  195,  200,  202,   75,   79,  200,   79,
      195,  196,   79,  196,  281,  202,  280,  195,  283,   79,
       79,  194,    0,  223,  282,  202,  282,  284,  200,   79,
      195,  200,    0,  196,   79,  200,   79,  195,  196,   79,

      196,  281,  285,  223,    0,  283,   79,   79,  197,  197,
      223,  282,  199,  282,  284,  200,   79,   80,  286,  199,
      196,   80,  203,  197,   80,   80,  199,  287,  197,  285,
      223,   80,  199,    0,   80,  197,  197,  203,    0,  199,
        0,   80,  203,  288,   80,  286,  199,    0,   80,  203,
      197,   80,   80,  199,  287,  197,  201,  289,   80,  199,
      205,   80,  291,  201,  203,  201,  292,  201,   80,  203,
      288,  208,  294,  205,  205,    0,  201,    0,  295,    0,
      205,    0,    0,  201,  289,  208,  206,  205,    0,  291,
      201,  208,  201,  292,  201,    0,  209,  209,  208,  294,

      205,  205,  206,  201,  204,  295,  206,  205,  204,  204,
      207,    0,  208,  206,    0,  204,    0,  209,  208,  210,
      207,  210,  204,  209,  209,  212,    0,    0,  204,  206,
      207,  204,  212,  206,  229,  204,  204,  207,  215,    0,
      296,  210,  204,  213,  209,  212,  210,  207,  210,  204,
      213,  215,  212,  217,  229,  204,  214,  207,  215,  212,
      217,  229,    0,  213,    0,  215,  214,  296,  210,  211,
      213,  211,  212,  217,  216,  211,  214,  213,  215,  218,
      217,  229,  211,  214,  216,  215,  211,  217,    0,  218,
      213,  211,    0,  214,  216,  219,  211,    0,  211,  218,

      217,  216,  211,  214,  297,  219,  218,    0,  221,  211,
      220,  216,    0,  211,  225,  219,  218,  221,  211,  224,
      222,  216,  219,  224,  220,  225,  218,  220,  221,  227,
      220,  297,  219,    0,  225,  221,  222,  220,  227,  224,
      222,  225,  219,    0,  221,  298,  224,  222,  299,  227,
      224,  220,  225,    0,  220,  221,  227,  220,  301,  302,
      228,  225,    0,  222,  228,  227,  224,  222,  226,  226,
      230,  230,  298,  231,    0,  299,  227,    0,  226,  231,
      228,  231,    0,  226,  226,  301,  302,  228,    0,  226,
      230,  228,  303,  231,  236,  226,  226,  230,  230,  232,

      231,  232,  233,  232,  234,  226,  231,  228,  231,  236,
      226,  226,  232,  234,  236,  233,  226,  230,  235,  303,
      231,  236,  233,  232,  234,    0,  232,  235,  232,  233,
      232,  234,  237,    0,    0,    0,  236,  238,  235,  232,
      234,  236,  233,  241,  238,  235,    0,  237,    0,  233,
      232,  234,  237,    0,  235,  244,  239,  238,  304,  237,
      239,  240,  240,  241,  238,  235,    0,  305,  244,    0,
      241,  238,  242,  242,  237,  244,  243,  293,    0,  237,
      239,  240,  244,  239,  238,  304,    0,  239,  240,  240,
      241,  243,  293,  242,  305,  244,  243,  245,    0,  242,

      242,  245,  244,  243,  293,  246,    0,  239,  240,  246,
      248,  249,  248,  247,  249,    0,    0,    0,  243,  293,
      242,  245,  247,  243,  245,  246,    0,  247,  245,    0,
      248,  249,  246,  247,    0,  251,  246,  248,  249,  248,
      247,  249,  250,  252,  250,  251,    0,  256,  245,  247,
      254,  250,  246,  254,  247,  251,  252,  248,  249,  250,
      247,  253,  251,  252,  250,  253,    0,  256,    0,  250,
      252,  250,  251,  254,  256,    0,  255,  254,  250,  257,
      254,  259,  251,  252,  255,  253,  250,  257,  253,  306,
      252,  250,  253,  258,  256,  255,  255,  259,  260,  257,

      254,  259,  260,  255,  258,  260,  257,    0,  259,  261,
      261,  255,  253,  258,  257,  262,  306,    0,  260,  262,
      258,  307,  255,  255,  259,  260,  257,    0,  259,  260,
      261,  258,  260,  265,  263,  262,  261,  261,  264,  267,
      258,  263,  262,  267,  266,  260,  262,  263,  307,  308,
      309,  264,  310,  265,  263,  311,  312,  261,  264,  266,
      265,  263,  262,  267,  266,  264,  267,  313,  263,  314,
      267,  266,  315,  316,  263,  317,  308,  309,  264,  310,
      265,  263,  311,  312,  318,  264,  266,  319,  320,  321,
      267,  266,  322,  323,  313,  324,  314,  325,  326,  315,

      316,  328,  317,  329,  330,  324,  331,  332,  333,  334,
      335,  318,  336,  337,  319,  320,  321,  339,  340,  322,
      323,  341,  324,  342,  325,  326,  343,  344,  328,  345,
      329,  330,  324,  331,  332,  333,  334,  335,  346,  336,
      337,  347,  348,  349,  339,  340,  350,  351,  341,  352,
      342,  353,  355,  343,  344,  356,  345,  357,  358,  359,
      360,  361,  362,  364,  365,  346,  365,  366,  347,  348,
      349,  367,  364,  350,  351,  369,  352,  370,  353,  355,
      371,  372,  356,  373,  357,  358,  359,  360,  361,  362,
      364,  365,  374,  365,  366,  375,  374,  376,  367,  364,

      379,  380,  369,  485,  370,  381,  382,  371,  372,  383,
      373,  384,    0,  385,  386,  486,  383,  385,    0,  374,
      379,  380,  375,  374,  376,  381,  382,  379,  380,  383,
      485,  384,  381,  382,  386,  387,  383,  385,  384,  388,
      385,  386,  486,  383,  385,  387,    0,  379,  380,  390,
      391,  390,  381,  382,    0,  387,  383,  388,  384,  388,
      389,  386,  387,  391,  385,  392,  388,  389,  393,  394,
      391,  390,  387,  397,    0,  395,  390,  391,  390,  395,
      389,  392,  387,  393,  388,  392,  388,  389,  393,  394,
      391,  396,  392,  397,  389,  393,  394,  391,  390,  395,

      397,  398,  395,  487,  488,  396,  395,  389,  392,  400,
      393,  396,  392,  400,  401,  393,  394,  399,  396,  403,
      397,  398,  489,  402,  399,  402,  395,  404,  398,  401,
      487,  488,  396,  400,  401,  490,  400,  399,  396,  403,
      400,  401,  404,  407,  399,  402,  403,  404,  398,  489,
      402,  399,  402,  408,  404,  405,  401,  406,  405,  410,
      400,  401,  490,  407,  399,  492,  403,  409,  406,  404,
      407,  409,  402,  408,  404,  495,    0,  406,  405,  410,
      408,  411,  405,  411,  406,  405,  410,  412,  496,  413,
      407,  409,  492,  416,  409,  406,  413,  415,  409,  414,

      408,  412,  495,  411,  406,  405,  410,  412,  411,  413,
      411,  415,  414,  416,  412,  496,  413,  415,  409,  414,
      416,  417,    0,  413,  415,  417,  414,  418,  412,  419,
      411,    0,  498,  499,  412,  418,  413,  419,  415,  414,
      416,  422,    0,  420,  415,  417,  414,  418,  417,  419,
      420,    0,  417,    0,  418,  421,  419,  422,  421,  498,
      499,  422,  418,  420,  419,    0,  423,  424,  422,  423,
      420,  424,  417,    0,  418,  501,  419,  420,  421,  426,
      425,  428,  421,  427,  422,  421,  423,  424,  422,  427,
      420,  428,  426,  423,  424,  425,  423,  429,  424,  426,

      425,  428,  501,  427,    0,  421,  426,  425,  428,  430,
      427,  431,  502,  423,  424,  432,  427,  429,  428,  426,
      435,  433,  425,  434,  429,  432,  426,  425,  428,  430,
      427,  431,  434,  437,  436,  432,  430,  433,  431,  502,
      435,  433,  432,  434,  429,  439,  439,  435,  433,  436,
      434,  438,  432,  437,  436,  438,  430,  503,  431,  434,
      437,  436,  432,    0,  433,  440,  439,  435,  433,  440,
      434,  438,  439,  439,  443,  441,  436,  441,  438,    0,
      437,  436,  438,  442,  503,  442,  504,  446,    0,  440,
      443,  444,  440,  439,  443,  441,  440,    0,  438,  445,

        0,  443,  441,  442,  441,  505,  444,  446,  450,    0,
      442,  444,  442,  504,  446,  445,  440,  443,  444,  445,
      447,  443,  441,  448,  451,  449,  445,  447,  450,    0,
      442,    0,  505,  444,  446,  450,  448,  452,  444,  449,
      447,  452,  445,  448,  451,  449,  445,  447,    0,  453,
      448,  451,  449,    0,  447,  450,  456,  455,  453,  457,
      456,  452,  454,  448,  452,  455,  449,  447,  452,  453,
      448,  451,  449,  454,  457,  458,  453,  455,  458,  457,
      456,    0,  454,  456,  455,  453,  457,  456,  452,  454,
      459,  461,  455,  460,  462,  458,  453,    0,  506,    0,

      454,  457,  458,  460,  455,  458,  457,  456,  463,  454,
      459,  461,  464,  460,  462,    0,  465,  459,  461,    0,
      460,  462,  458,  507,  469,  506,  463,  464,  463,    0,
      460,  465,  464,  469,    0,  463,  465,  459,  461,  464,
      460,  462,  466,  465,  469,  467,  468,  470,  471,  466,
      507,  469,    0,  463,  464,  463,  467,  476,  465,  464,
      469,  468,  466,  465,    0,  467,  468,  470,  471,  466,
      472,  469,  467,  468,  470,  471,  466,  476,    0,  472,
        0,  475,    0,  467,  476,  475,    0,  477,  468,  466,
      472,  473,  467,  468,  470,  471,  477,  472,  508,  474,

      478,  473,    0,  473,  476,  475,  472,  477,  475,  474,
      511,  473,  475,  479,  477,  479,  478,  472,  473,  474,
      478,  480,    0,  477,  512,  508,  474,  478,  473,  481,
      473,    0,  475,  513,  477,  479,  474,  511,  473,  480,
      479,  480,  479,  478,  481,  482,  474,  478,  480,  481,
      483,  512,  514,  483,  482,    0,  481,  515,  482,  516,
      513,  517,  479,  519,  520,  482,  480,  523,  480,  484,
      483,  481,  482,  524,  526,  529,  481,  483,  530,  514,
      483,  482,  484,  531,  515,  482,  516,  532,  517,  484,
      519,  520,  482,  533,  523,  534,  484,  483,  536,  540,

      524,  526,  529,  542,  544,  530,  534,  545,  545,  484,
      531,  546,  547,  549,  532,  550,  484,  551,  552,  553,
      533,  555,  534,  556,  557,  536,  540,  558,  559,  560,
      542,  544,  561,  534,  545,  545,  562,  564,  546,  547,
      549,  565,  550,  566,  551,  552,  553,  567,  555,  570,
      556,  557,  572,  573,  558,  559,  560,  574,  575,  561,
      576,  577,  578,  562,  564,  579,  581,  583,  565,    0,
      566,    0,    0,    0,  567,  588,  570,  586,  587,  572,
      573,  589,    0,  590,  574,  575,  591,  576,  577,  578,
      586,  587,  579,  581,  583,  588,  590,  586,  587,  592,

      594,  589,  588,  590,  586,  587,  591,  593,  589,  595,
      590,  593,  689,  591,    0,  691,  692,  586,  587,  592,
      594,    0,  588,  590,  586,  587,  592,  594,  589,  595,
      590,  593,  596,  591,  593,  597,  595,  598,  593,  689,
      596,  601,  691,  692,  693,  599,  592,  594,  597,  600,
      694,  695,  596,  696,  603,  597,  595,  598,  593,  596,
      599,  601,  597,  600,  598,  599,  602,  596,  601,  600,
      603,  693,  599,  602,  603,  597,  600,  694,  695,  596,
      696,  603,  597,  604,  598,  605,  602,  599,  601,  605,
      600,  606,  599,  602,  610,  608,  600,  603,  604,  608,

      602,  603,    0,  604,  606,  607,    0,  607,  611,  605,
      604,  606,  605,  602,  610,  608,  605,  609,  606,  698,
      699,  610,  608,    0,  609,  604,  608,  607,  611,  612,
      604,  606,  607,  615,  607,  611,  605,  609,  606,  613,
      612,  610,  608,  618,  609,  614,  698,  699,  615,  612,
      613,  609,    0,  615,  607,  611,  612,    0,  616,  613,
      615,  614,  616,  618,  609,  614,  613,  612,  700,  617,
      618,  619,  614,  617,    0,  615,  612,  613,  702,  620,
      615,  622,  616,  621,  623,  616,  613,  621,  614,  616,
      618,  619,  614,  617,  620,  700,  617,  626,  619,  620,

      617,  622,  625,  628,  623,  702,  620,  621,  622,  616,
      621,  623,  624,  625,  621,  629,  624,  626,  619,    0,
      617,  620,  625,  628,  626,    0,  620,  630,  622,  625,
      628,  623,  627,  631,  621,  629,  624,  632,  633,  624,
      625,  627,  629,  624,  626,    0,  631,  630,    0,  625,
      628,  633,  627,  631,  630,    0,  632,  632,  633,  627,
      631,    0,  629,  624,  632,  633,  636,    0,  627,  634,
      638,  639,  640,  631,  630,  635,    0,  635,  633,  627,
      631,  642,  634,  632,  632,  633,  636,  637,  635,  634,
      638,  639,  640,  636,  637,  635,  634,  638,  639,  640,

      703,  642,  635,  643,  635,  641,  644,  637,  642,  634,
      643,  645,    0,  636,  637,  635,  634,  638,  639,  640,
      641,  637,  635,  643,  704,  641,  644,  703,  642,  646,
      643,  645,  641,  644,  637,  648,    0,  643,  645,  647,
      649,  705,  647,  646,  646,  651,  706,  641,  648,  646,
      643,  704,  641,  644,    0,  648,  646,    0,  645,  647,
      649,  650,  648,  650,  652,  651,  647,  649,  705,  647,
      646,  646,  651,  706,    0,  648,  646,  652,  655,  707,
      653,  654,  648,  650,  652,  708,  647,  649,  650,  654,
      650,  652,  651,  653,  658,  656,    0,  709,  655,  656,

      653,  654,  658,    0,  652,  655,  707,  653,  654,  657,
      650,  652,  708,  657,  658,  664,  654,  659,  710,  656,
      653,  658,  656,  660,  709,  655,  656,  653,  654,  658,
      659,  661,  663,  657,  663,  664,  657,  659,  660,  661,
      657,  658,  664,  660,  659,  710,  656,  662,  665,  666,
      660,  661,  667,  666,  663,  711,  662,  659,  661,  663,
      657,  663,  664,  714,  659,  660,  661,  662,  665,  666,
      660,  669,  667,  670,  662,  665,  666,  668,  661,  667,
      666,  663,  711,  662,  673,  672,  673,  668,  671,  715,
      714,  669,    0,  670,  662,  665,  666,  668,  669,  667,

      670,  674,  671,  675,  668,  672,  673,  717,  671,    0,
      674,  673,  672,  673,  668,  671,  715,    0,  669,  675,
      670,  674,  679,  675,  668,  677,  719,  676,  674,  671,
      675,  676,  672,  673,  717,  671,  678,  674,  678,  681,
      677,  680,  679,    0,  680,  677,  675,    0,  674,  679,
      675,  676,  677,  719,  676,  683,  678,  682,  676,  681,
      684,  680,  722,  678,  723,  678,  681,  677,  680,  679,
      685,  680,  677,  682,  686,  683,  724,  682,  676,  725,
      684,  730,  683,  678,  682,  732,  681,  684,  680,  722,
      685,  723,  733,  734,  686,  737,  738,  685,  739,  740,

      682,  686,  683,  724,  682,  741,  725,  684,  730,  743,
      744,  745,  732,  746,  747,  748,  749,  685,  750,  733,
      734,  686,  737,  738,  751,  739,  740,  753,  754,  755,
      757,  758,  741,  759,    0,    0,  743,  744,  745,  761,
      746,  747,  748,  749,  762,  750,    0,  763,  835,  764,
      765,  751,  766,  769,  753,  754,  755,  757,  758,  761,
      759,  767,  767,  769,  762,  770,  761,  763,  763,  764,
      765,  762,  766,  769,  763,  835,  764,  765,  768,  766,
      769,  771,  767,  772,    0,  770,  761,  768,  767,  767,
      769,  762,  770,  772,  763,  763,  764,  765,  768,  766,

      769,  771,  774,  772,  773,  768,  775,  778,  771,  767,
      772,  773,  770,    0,  768,  776,  778,  777,  837,  776,
      772,  779,  774,    0,  773,  768,  775,  778,  771,  774,
      772,  773,  777,  775,  778,  776,  780,  777,  773,    0,
      781,  779,  776,  778,  777,  837,  776,    0,  779,  774,
      782,  773,  783,  775,  778,  781,  780,    0,  838,  777,
      781,  786,  776,  780,  777,  782,  783,  781,  779,  784,
      782,    0,  783,  784,  787,  788,  785,  782,  785,  783,
        0,  786,  781,  780,  789,  838,  790,  781,  786,  784,
      788,  789,  782,  783,  787,  788,  784,  782,  785,  783,

      784,  787,  788,  785,  789,  785,  790,  791,  786,  791,
      792,  789,  794,  790,    0,    0,  784,  788,  789,    0,
      793,  787,  788,  795,  797,  785,  796,  791,  798,  800,
      792,  789,  794,  790,  791,  793,  791,  792,  799,  794,
      793,  796,  798,  795,  797,  799,  796,  793,  798,  800,
      795,  797,    0,  796,  791,  798,  800,  792,  799,  794,
      801,  802,  793,  803,  804,  799,  805,  793,  796,  798,
      795,  797,  799,  796,  806,  798,  800,  808,  806,  807,
      801,  802,  807,  803,  804,  799,  805,  801,  802,    0,
      803,  804,  808,  805,  809,  810,  811,  808,  806,  807,

      814,  806,    0,    0,  808,  806,  807,  801,  802,  807,
      803,  804,  839,  805,  809,  810,  811,  812,  813,  808,
      814,  809,  810,  811,  808,  806,  807,  814,  815,  816,
      812,  813,  815,    0,    0,  840,  817,  812,  813,  839,
      817,  809,  810,  811,  812,  813,  819,  814,  815,  816,
      818,  818,  842,  820,  820,  815,  816,  812,  813,  815,
      817,  819,  840,  817,  812,  813,  819,  817,  821,  822,
        0,  818,  821,  819,  820,  815,  816,  818,  818,  842,
      820,  820,  825,  822,  823,  824,  825,  817,  819,  822,
        0,  843,  821,  819,  826,  821,  822,  823,  818,  821,

      824,  820,  827,  829,  823,  824,  825,  828,  828,  825,
      822,  823,  824,  825,  826,    0,  822,  830,  843,  821,
      845,  826,  827,  829,  823,  831,  834,  824,  828,  827,
      829,  823,  824,  825,  828,  828,  832,  830,  833,  831,
      832,  826,  833,  847,  830,  831,  834,  845,  851,  827,
      829,  853,  831,  834,  854,  828,  860,  861,  864,  865,
      832,  867,  833,  832,  830,  833,  831,  832,  868,  833,
      847,  869,  831,  834,  871,  851,  872,  876,  853,  878,
      879,  854,  880,  860,  861,  864,  865,  832,  867,  833,
      885,  886,  887,  888,  890,  868,  889,    0,  869,  944,

        0,  871,  946,  872,  876,  889,  878,  879,  891,  880,
      893,  947,  887,  888,  890,    0,  889,  885,  886,  887,
      888,  890,  891,  889,  892,  894,  944,  894,  891,  946,
      893,  892,  889,  895,    0,  891,  896,  893,  947,  887,
      888,  890,  897,  889,  892,  897,  898,  894,  895,  891,
      900,  892,  894,  895,  894,  891,  896,  893,  892,  899,
      895,  899,  901,  896,  902,  897,  898,  903,    0,  897,
      900,  892,  897,  898,  894,  895,  904,  900,    0,  952,
      895,  899,  901,  896,  902,  906,  899,  903,  899,  901,
      905,  902,  897,  898,  903,  907,  904,  900,  908,  905,

      906,  909,    0,  904,  910,  906,  952,    0,  899,  901,
      905,  902,  906,  911,  903,  907,  912,  905,  908,  913,
        0,  909,  907,  904,  910,  908,  905,  906,  909,  912,
      914,  910,  906,  911,  915,  918,  912,  905,  920,  913,
      911,    0,  907,  912,  921,  908,  913,  922,  909,  917,
      914,  910,  916,  917,  915,  918,  912,  914,  920,  916,
      911,  915,  918,  912,  921,  920,  913,  922,  919,  954,
      924,  921,  916,  917,  922,    0,  917,  914,  925,  916,
      917,  915,  918,  919,  924,  920,  916,  923,  919,  923,
      924,  921,  926,  927,  922,  919,  954,  924,  925,  916,

      917,  928,  929,  930,  933,  925,    0,  930,  928,  923,
      919,  924,  926,  927,  923,  919,  923,  924,  955,  926,
      927,  928,  929,  932,  933,  925,  934,  930,  928,  929,
      930,  933,  935,  931,  930,  928,  923,  931,  932,  926,
      927,  936,  937,  932,  958,  955,  934,  961,  928,  929,
      932,  933,  935,  934,  930,  937,  938,  931,  962,  935,
      931,  936,  937,  938,  931,  932,  963,  966,  936,  937,
      932,  958,  967,  934,  961,  968,  938,  969,  970,  935,
      993,  972,  937,  938,  931,  962,  973,  966,  936,  937,
      938,  996,  967,  963,  966,  968,  971,  969,  970,  967,

      971,  972,  968,  938,  969,  970,  973,  993,  972,  975,
      976,  974,  977,  973,  966,  978,    0,  998,  996,  967,
      971, 1000,  968,  971,  969,  970,  974,  971,  972,  975,
      976,  974,  977,  973,  980,  978,  975,  976,  974,  977,
      982,  979,  978,  979,  998,  983,  984,  971, 1000, 1001,
        0,  981, 1013,  974,  980,  986,  975,  976,  974,  977,
      982,  980,  978,  979,  981,  983,  984,  982,  979,  985,
      979,  981,  983,  984,  987,  986, 1001,  989,  981, 1013,
      990,  980,  986,  991,  985,  989,  988,  982,  992,  985,
      979,  981,  983,  984,  987,    0,  985,  989,  981,  988,

      990,  987,  986,  991,  989, 1003,  988,  990,  992, 1004,
      991,  985,  989,  988, 1005,  992,  985,    0, 1007, 1009,
     1003,  987, 1006, 1010,  989, 1003,  988,  990, 1015, 1004,
      991, 1008, 1003,  988, 1005,  992, 1004, 1006, 1007, 1009,
     1012, 1005, 1006, 1010, 1008, 1007, 1009, 1003, 1011, 1006,
     1010, 1008, 1003, 1018, 1019, 1015, 1004, 1021, 1008, 1011,
     1012, 1005, 1020, 1022, 1006, 1007, 1009, 1012, 1011, 1006,
     1010, 1008, 1025, 1018, 1019, 1011, 1020, 1021, 1008,    0,
     1018, 1019, 1020, 1022, 1021, 1026, 1011, 1012,    0, 1020,
     1022,    0, 1025,    0,    0, 1011,    0,    0,    0, 1025,

     1018, 1019,    0, 1020, 1021, 1026,    0,    0,    0, 1020,
     1022,    0, 1026,    0,    0,    0,    0,    0,    0, 1025,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1026, 1028, 1028, 1028, 1028, 1028, 1029,    0,
        0, 1029, 1029, 1031, 1031, 1031,    0, 1031, 1032,    0,
     1032, 1032, 1032, 1033,    0, 1033, 1033, 1033, 1034,    0,
     1034, 1034, 1034, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,

     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 1926 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1940 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2227 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1028 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1027 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 136:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 143:
#line 207 "flex_lexer.l"
case 144:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 230 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 232 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3063 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1028 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1028 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1027);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 237 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

